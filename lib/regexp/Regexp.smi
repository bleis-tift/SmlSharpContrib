_require "basis.smi"
         _require "REGEXP_PARSER.sig"
         _require "RegexpParser.smi"
functor Regexp(X: sig
                   structure S: sig
                   eqtype char
                   eqtype string
                   val ^ : string * string -> string
                   val sub: string * int -> char
                   val size: string -> int
                   val implode: char list -> string
                   val substring: string * int * int -> string
                   val extract: string * int * int option -> string
                   end

                   structure Parser: sig
                   eqtype char
                   eqtype string
                   datatype ast
                     = Item of char
                     | LineStart
                     | LineEnd
                     | Or of ast list
                     | And of ast list
                     | Kleene of ast
                     | Group of int * ast
                     | Any
                          | Empty

                   type t = ast * int
                   exception Lex
                   exception Parse
                   val fromLiteral: Char.char -> char
                   val re : string -> t
                   end
                   sharing type S.char = Parser.char
                   sharing type S.string = Parser.string
               end
              ) = struct
type t = X.Parser.t
type string = X.Parser.string
exception Lex = X.Parser.Lex
exception Parse = X.Parser.Parse
val re : string -> t
val match : t * string * int ->  (int * int * ((int * int) array)) option
val matchString : t * string * int -> (string * string array) option
val matchStrings : t * string * int -> string list
val doesMatch : t * string * int -> bool
val split : t * string * int -> string list
val replace : t * string * int * string-> string
val replaceAll : t * string * int * string -> string
end

